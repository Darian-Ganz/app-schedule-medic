service: app-schedule-medic
frameworkVersion: '3'

useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: dev

  environment:
    APPOINTMENTS_TABLE_NAME: ${env:APPOINTMENTS_TABLE_NAME}
    PORT: ${env:PORT, '3306'}
    DB_NAME: ${env:DB_NAME}
    DB_USER_NAME: ${env:DB_USER_NAME}
    DB_PASSWORD: ${env:DB_PASSWORD}
    APP_REGION: ${env:AWS_REGION, 'us-east-1'}
    HOST_NAME: ${env:RDS_ENDPOINT}
    SNS_TOPIC_ARN: !Ref AppointmentTopic
    SQS_PE_URL: !Ref SQSPEQueue
    SQS_CL_URL: !Ref SQSCLQueue

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem  
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/Appointments
        - Effect: Allow
          Action:
            - sns:Publish
          Resource: !Ref AppointmentTopic
        - Effect: Allow
          Action:
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource:
            - arn:aws:sqs:${self:provider.region}:*:SQS_PE
            - arn:aws:sqs:${self:provider.region}:*:SQS_CL
        - Effect: Allow
          Action:
            - rds:*
          Resource: "*"
        - Effect: Allow
          Action:
            - events:PutEvents
          Resource: "*"

functions:
  appointmentHandler:
    handler: src/handlers/appointment.handler
    events:
      - http:
          path: appointments
          method: post
      - http:
          path: appointments/{insuredId}
          method: get
      - sqs:
          arn:
            Fn::GetAtt: [SQSAppointmentConfirmationsQueue, Arn]

  appointment_pe:
    handler: src/handlers/appointment_pe.handler
    vpc:
      securityGroupIds:
        - sg-05a67286de62e5c1d
      subnetIds:
        - subnet-0f9c963527325895a
    events:
      - sqs:
          arn:
            Fn::GetAtt: [SQSPEQueue, Arn]

  appointment_cl:
    handler: src/handlers/appointment_cl.handler
    vpc:
      securityGroupIds:
        - sg-05a67286de62e5c1d
      subnetIds:
        - subnet-0f9c963527325895a
    events:
      - sqs:
          arn:
            Fn::GetAtt: [SQSCLQueue, Arn]

resources:
  Resources:

    ## SNS Topic
    AppointmentTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: AppointmentTopic

    ## SNS Subscriptions with filter policy
    AppointmentSubscriptionPE:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref AppointmentTopic
        Protocol: sqs
        Endpoint: !GetAtt SQSPEQueue.Arn
        FilterPolicy:
          countryISO:
            - PE

    AppointmentSubscriptionCL:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref AppointmentTopic
        Protocol: sqs
        Endpoint: !GetAtt SQSCLQueue.Arn
        FilterPolicy:
          countryISO:
            - CL

    ## SQS Queues
    SQSPEQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: SQS_PE

    SQSCLQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: SQS_CL

    SQSAppointmentConfirmationsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: SQS_AppointmentsConfirmation

    ## EventBrdige rules
    AppointmentEventRule:
      Type: AWS::Events::Rule
      Properties:
        Name: appointment-event-rule
        EventBusName: default
        EventPattern:
          source:
            - "appointment.service"
          detail-type:
            - "AppointmentCreatedCL"
            - "AppointmentCreatedPE"
        Targets:
          - Arn:
              Fn::GetAtt: [SQSAppointmentConfirmationsQueue, Arn]
            Id: TargetSQS

    ## Policies
    SQSPEPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref SQSPEQueue
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: "SQS:SendMessage"
              Resource: !GetAtt SQSPEQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref AppointmentTopic

    SQSCLPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref SQSCLQueue
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: "SQS:SendMessage"
              Resource: !GetAtt SQSCLQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref AppointmentTopic
    
    SQSAppointmentConfirmationsPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref SQSAppointmentConfirmationsQueue
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: events.amazonaws.com
              Action: "SQS:SendMessage"
              Resource: !GetAtt SQSAppointmentConfirmationsQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !GetAtt AppointmentEventRule.Arn

plugins:
  - serverless-offline
  - serverless-plugin-typescript